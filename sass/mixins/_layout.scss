// Center block
@mixin center-block
{
    display:      block;
    margin-left:  auto;
    margin-right: auto;
}

// Clearfix
@mixin clearfix()
{
    content: "";
    display: table;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after()
{
    clear: both;
}

/// Shorthand rems-mixin for font-size and line-height
///
/// @param {number} $fontSize [1] font-size in rem/em/px
/// @param {$lineHeight} $fontSize [false] optional line-height in rem/em/px
@mixin font-size($fontSize: 1, $lineHeight: false)
{

    @include rems(font-size, $fontSize);

    @if $lineHeight != false {
        @include rems(line-height, $lineHeight);
    }
}

/// Generates properties with rem and pixel fallbacks.
/// Conversion is resolved against $rem-size.
/// Depending on the provided units
///
/// @param {String} $property Name of the property to generate.
/// @param {List}   $values   List of Rem-based values to translate (no unit required).
@mixin rems($property, $values) {

    $px: ();
    $rem: ();
    $remSize: strip-unit($rem-size);

    @each $value in $values {

        // Only process numbers, leave string-values like "auto" alone.
        @if type_of($value) == number {
            $unit: unit($value);
            $value: strip-unit($value);

            @if $unit == "px" {
                // Pixel-units are converted to rems.

                $px: append($px, $value * 1px);
                $rem: append($rem, ($value / $remSize) * 1rem);

            } @else if $unit == "rem" or $unit == 'em' {

                // Rems / ems are converted to pixels. Note, rem and em are treated the same.
                $px: append($px, ($value * $remSize) * 1px);
                $rem: append($rem, $value * 1rem);

            } @else {

                // All other units are left alone.
                $px: append($px, $value);
                $rem: append($rem, $value);
            }

        } @else {
            // Everything else is left alone.
            $px: append($px, $value);
            $rem: append($rem, $value);
        }
    }

    #{$property}: $px;
    #{$property}: $rem;

}

/// Shorthand function for generating rem-based paddings.
///
/// @param {List} $values List of rem-based paddings without unit.
@mixin padding($values) {
    @include rems('padding', $values);
}

/// Shorthand function for generating rem-based margins.
///
/// @param {List} $values List of rem-based margins without unit.
@mixin margin($values) {
    @include rems('margin', $values);
}
